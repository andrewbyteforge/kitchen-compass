"""
Manual script to update the scrapers __init__.py file.

Run this script: python update_init.py
"""

import os

# Content for the new __init__.py
new_init_content = '''"""
ASDA Scrapers Package with Stealth Anti-Bot Detection

File: asda_scraper/scrapers/__init__.py
"""

# Import stealth components
from .stealth_webdriver_manager import StealthWebDriverManager
from .selenium_scraper_stealth import StealthSeleniumAsdaScraper
from .enhanced_popup_handler import EnhancedPopupHandler

# Import other components
from .models import ScrapingResult, ProductData
from .exceptions import ScraperException, DriverSetupException

# Factory function for dashboard compatibility
def create_selenium_scraper(crawl_session, headless=False):
    """
    Create a stealth scraper instance for dashboard use.
    
    Args:
        crawl_session: CrawlSession instance
        headless: Whether to run in headless mode (default: False for better stealth)
        
    Returns:
        StealthSeleniumAsdaScraper: Configured stealth scraper
    """
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"Creating stealth scraper for dashboard session {crawl_session.pk}")
    
    # Force visible mode for better stealth unless explicitly requested
    if headless and not crawl_session.crawl_settings.get('force_headless', False):
        logger.warning("Using visible mode for better stealth performance")
        headless = False
    
    return StealthSeleniumAsdaScraper(crawl_session, headless=headless)

# Backwards compatibility
SeleniumAsdaScraper = StealthSeleniumAsdaScraper

__all__ = [
    'StealthWebDriverManager',
    'StealthSeleniumAsdaScraper', 
    'EnhancedPopupHandler',
    'ScrapingResult',
    'ProductData', 
    'ScraperException',
    'DriverSetupException',
    'create_selenium_scraper',
    'SeleniumAsdaScraper'  # Alias for compatibility
]
'''

# Write the file
init_file_path = 'asda_scraper/scrapers/__init__.py'

try:
    # Create backup
    if os.path.exists(init_file_path):
        backup_path = init_file_path + '.backup'
        with open(init_file_path, 'r') as f:
            backup_content = f.read()
        with open(backup_path, 'w') as f:
            f.write(backup_content)
        print(f"Backup created: {backup_path}")
    
    # Write new content
    with open(init_file_path, 'w', encoding='utf-8') as f:
        f.write(new_init_content)
    
    print(f"Successfully updated: {init_file_path}")
    print("")
    print("NEXT STEPS:")
    print("1. Restart your Django development server")
    print("2. Test the dashboard - it should now use stealth approach")
    print("3. If there are issues, restore from backup: {}.backup".format(init_file_path))

except Exception as e:
    print(f"Error updating file: {e}")