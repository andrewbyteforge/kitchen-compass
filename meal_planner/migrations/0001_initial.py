# Generated by Django 5.2.3 on 2025-06-15 19:22

import datetime
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('recipe_hub', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MealType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('display_order', models.IntegerField(default=0)),
                ('default_time', models.TimeField(blank=True, help_text='Default time for this meal', null=True)),
                ('icon', models.CharField(default='bi-egg-fried', help_text='Bootstrap icon class', max_length=50)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MealPlanTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this template', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of this meal plan template')),
                ('duration_days', models.IntegerField(default=7, help_text='Number of days this template covers', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('is_public', models.BooleanField(default=False, help_text='Allow other users to use this template')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plan_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('owner', 'name')},
            },
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this meal plan', max_length=200)),
                ('start_date', models.DateField(default=datetime.date.today, help_text='Start date of the meal plan')),
                ('end_date', models.DateField(help_text='End date of the meal plan')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this meal plan is currently active')),
                ('notes', models.TextField(blank=True, help_text='Optional notes for this meal plan')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plans', to=settings.AUTH_USER_MODEL)),
                ('created_from_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_plans', to='meal_planner.mealplantemplate')),
            ],
            options={
                'ordering': ['-start_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MealSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('servings', models.IntegerField(default=1, help_text='Number of servings to prepare', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('notes', models.TextField(blank=True, help_text='Notes for this meal')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meal_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_slots', to='meal_planner.mealplan')),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meal_slots', to='recipe_hub.recipe')),
                ('meal_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='meal_slots', to='meal_planner.mealtype')),
            ],
            options={
                'ordering': ['date', 'meal_type__display_order'],
            },
        ),
        migrations.CreateModel(
            name='MealPlanTemplateSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_offset', models.IntegerField(help_text='Days from start of plan (0 = first day)', validators=[django.core.validators.MinValueValidator(0)])),
                ('servings', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('notes', models.TextField(blank=True)),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='template_slots', to='recipe_hub.recipe')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_slots', to='meal_planner.mealplantemplate')),
                ('meal_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='template_slots', to='meal_planner.mealtype')),
            ],
            options={
                'ordering': ['day_offset', 'meal_type__display_order'],
            },
        ),
        migrations.AddIndex(
            model_name='mealplan',
            index=models.Index(fields=['owner', '-start_date'], name='meal_planne_owner_i_492435_idx'),
        ),
        migrations.AddIndex(
            model_name='mealplan',
            index=models.Index(fields=['start_date', 'end_date'], name='meal_planne_start_d_57fbc1_idx'),
        ),
        migrations.AddConstraint(
            model_name='mealplan',
            constraint=models.CheckConstraint(check=models.Q(end_date__gte=models.F('start_date')), name='end_date_after_start_date'),
        ),
        migrations.AddIndex(
            model_name='mealslot',
            index=models.Index(fields=['meal_plan', 'date'], name='meal_planne_meal_pl_266bd9_idx'),
        ),
        migrations.AddIndex(
            model_name='mealslot',
            index=models.Index(fields=['date'], name='meal_planne_date_1605b8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mealslot',
            unique_together={('meal_plan', 'date', 'meal_type')},
        ),
        migrations.AlterUniqueTogether(
            name='mealplantemplateslot',
            unique_together={('template', 'day_offset', 'meal_type')},
        ),
    ]
