# Generated by Django

from django.db import migrations, models
import django.db.models.deletion
from decimal import Decimal

def convert_quantity_to_decimal(apps, schema_editor):
    """Convert fraction strings in quantity field to decimals before changing field type."""
    Ingredient = apps.get_model('recipe_hub', 'Ingredient')
    
    # Common fraction mappings
    fraction_map = {
        '1/2': '0.5',
        '1/3': '0.333',
        '1/4': '0.25',
        '3/4': '0.75',
        '2/3': '0.667',
        '1/8': '0.125',
        '3/8': '0.375',
        '5/8': '0.625',
        '7/8': '0.875',
        '1/6': '0.167',
        '5/6': '0.833',
    }
    
    # Get all ingredients
    for ingredient in Ingredient.objects.all():
        if ingredient.quantity:
            quantity_str = str(ingredient.quantity).strip()
            
            # Check if it's a simple fraction
            if quantity_str in fraction_map:
                # Use raw SQL to avoid field type issues
                from django.db import connection
                with connection.cursor() as cursor:
                    cursor.execute(
                        "UPDATE recipe_hub_ingredient SET quantity = %s WHERE id = %s",
                        [fraction_map[quantity_str], ingredient.id]
                    )
            # Check if it's a mixed number (e.g., "1 1/2")
            elif ' ' in quantity_str:
                parts = quantity_str.split(' ')
                if len(parts) == 2 and parts[1] in fraction_map:
                    try:
                        whole = float(parts[0])
                        fraction = float(fraction_map[parts[1]])
                        total = str(whole + fraction)
                        # Use raw SQL
                        from django.db import connection
                        with connection.cursor() as cursor:
                            cursor.execute(
                                "UPDATE recipe_hub_ingredient SET quantity = %s WHERE id = %s",
                                [total, ingredient.id]
                            )
                    except ValueError:
                        pass

def reverse_func(apps, schema_editor):
    # We don't want to reverse this
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('recipe_hub', '0002_recipe_meal_types'),
    ]

    operations = [
        # First, convert any fraction strings to decimal-compatible values
        migrations.RunPython(convert_quantity_to_decimal, reverse_func),
        
        # Create the new IngredientCategory model
        migrations.CreateModel(
            name='IngredientCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name for ingredients', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly version of the name', max_length=100, unique=True)),
                ('display_order', models.IntegerField(default=0, help_text='Order in which to display this category')),
                ('keywords', models.TextField(blank=True, help_text="Comma-separated keywords for auto-categorization (e.g., 'chicken,beef,pork' for Meat category)")),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ingredient Category',
                'verbose_name_plural': 'Ingredient Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        
        # Update ingredient model options
        migrations.AlterModelOptions(
            name='ingredient',
            options={'ordering': ['order', 'name']},
        ),
        
        # Add the notes field first (it's just a CharField, no conversion needed)
        migrations.AddField(
            model_name='ingredient',
            name='notes',
            field=models.CharField(blank=True, help_text="Optional notes (e.g., 'finely chopped', 'room temperature')", max_length=200, default=''),
            preserve_default=False,
        ),
        
        # Now alter the quantity field to DecimalField
        migrations.AlterField(
            model_name='ingredient',
            name='quantity',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
        ),
        
        # Finally add the category field (after IngredientCategory is created)
        migrations.AddField(
            model_name='ingredient',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Category for shopping list organization', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ingredients', to='recipe_hub.ingredientcategory'),
        ),
    ]